
# symlinks to be created.

[git]
gitconfig = {this = '~/.gitconfig', to_this = '~/dotfiles/settings/.gitconfig'}
gitcred = {this = '~/.git-credentials', to_this = '~/dotfiles/settings/.git-credentials'}

[ssh]
keys = {this = '~/.ssh', to_this = '~/dotfiles/creds/.ssh', contents = 'True'}


[github_cli_token]
token = {this = '~/.copilot-cli-access-token', to_this = '~/dotfiles/creds/git/.copilot-cli-access-token'}

[opencommit]
opencommit = {this = '~/.opencommit', to_this = '~/dotfiles/settings/.opencommit'}

[pypi]
creds = {this = '~/.pypirc', to_this = '~/dotfiles/creds/msc/.pypirc'}

[rclone_linux]
config = {this = '~/.config/rclone/rclone.conf', to_this = '~/dotfiles/creds/rclone/rclone.conf'}

[rclone_windows]
config = {this = '~/AppData/Roaming/rclone/rclone.conf', to_this = '~/dotfiles/creds/rclone/rclone.conf'}

[presenterm]
config = {this = '~/.config/presenterm/config.yaml', to_this = 'LIBRARY_ROOT/settings/presenterm/config.yaml'}

# shells profiles
[powershell_windows]
CurrentUserCurrentHost = {this = '~/Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1', to_this = '~/dotfiles/shells/windows_powershell/CurrentUserCurrentHost/Microsoft.PowerShell_profile.ps1'}
CurrentUserAllHosts = {this = '~/Documents\WindowsPowerShell\profile.ps1', to_this = '~/dotfiles/shells/windows_powershell/CurrentUserAllHosts/profile.ps1'}
AllUsersCurrentHost = {this = 'C:\Windows\System32\WindowsPowerShell\v1.0\Microsoft.PowerShell_profile.ps1', to_this = '~/dotfiles/shells/powershell/AllUsersCurrentHost/Microsoft.PowerShell_profile.ps1'}
AllUsersAllHosts = {this = 'C:\Windows\System32\WindowsPowerShell\v1.0\profile.ps1', to_this = '~/dotfiles/shells/windows_powershell/AllUsersAllHosts/profile.ps1'}

[pwsh_windows]
CurrentUserCurrentHost = {this = '~/Documents\PowerShell\Microsoft.PowerShell_profile.ps1', to_this = '~/dotfiles/shells/powershell/CurrentUserCurrentHost/Microsoft.PowerShell_profile.ps1'}
CurrentUserAllHosts = {this = '~/Documents\PowerShell\profile.ps1', to_this = '~/dotfiles/shells/powershell/CurrentUserAllHosts/profile.ps1'}
AllUsersCurrentHost = {this = 'C:\Program Files\PowerShell\7\Microsoft.PowerShell_profile.ps1', to_this = '~/dotfiles/shells/powershell/AllUsersCurrentHost/Microsoft.PowerShell_profile.ps1'}
AllUsersAllHosts = {this = 'C:\Program Files\PowerShell\7\profile.ps1', to_this = '~/dotfiles/shells/powershell/AllUsersAllHosts/profile.ps1'}

[bash_linux]
bashrc = {this = '~/.inputrc', to_this = '~/dotfiles/shells/bash/.inputrc'}

[nushell_windows]
config = {this = '~/AppData/Roaming/nushell/config.nu', to_this = 'LIBRARY_ROOT/settings/shells/nushell/config.nu'}
env = {this = '~/AppData/Roaming/nushell/env.nu', to_this = 'LIBRARY_ROOT/settings/shells/nushell/env.nu'}

[nushell_linux]
config = {this = '~/.config/nushell/config.nu', to_this = 'LIBRARY_ROOT/settings/shells/nushell/config.nu'}
env = {this = '~/.config/nushell/env.nu', to_this = 'LIBRARY_ROOT/settings/shells/nushell/env.nu'}


[kitty_linux]
config = {this = '~/.config/kitty/kitty.conf', to_this = 'LIBRARY_ROOT/settings/shells/kitty/kitty.conf'}

[alacritty_linux]
config = {this = '~/.config/alacritty/alacritty.toml', to_this = 'LIBRARY_ROOT/settings/shells/alacritty/alacritty.toml'}
config_yaml = {this = '~/.config/alacritty/alacritty.yml', to_this = 'LIBRARY_ROOT/settings/shells/alacritty/alacritty.yml'}

[alacritty_windows]
config = {this = '~/AppData/Roaming/alacritty/alacritty.toml', to_this = 'LIBRARY_ROOT/settings/shells/alacritty/alacritty.toml'}

[hyper_terminal]
config = {this = '~/.hyper.js', to_this = 'LIBRARY_ROOT/settings/shells/hyper/.hyper.js'}

[wezterminal]
config = {this = '~/.config/wezterm/wezterm.lua', to_this = 'LIBRARY_ROOT/settings/shells/wezterm/wezterm.lua'}


[vtm_windows]
settings = {this = '~/.config/vtm/settings.xml', to_this = 'LIBRARY_ROOT/settings/shells/vtm/settings.xml'}

[ipython_default_config]
# config = {this = '~/.ipython/profile_default/ipython_config.py', to_this = 'LIBRARY_ROOT/settings/shells/ipy/profiles/default/ipython_config.py'}
play_extension = {this = '~/.ipython/profile_default/startup/playext.py', to_this = 'LIBRARY_ROOT/settings/shells/ipy/profiles/default/startup/playext.py'}


[scripts_linux]
public = {this = '~/scripts', to_this = 'LIBRARY_ROOT/scripts/linux'}


[scripts_windows]
public = {this = '~/scripts', to_this = 'LIBRARY_ROOT/scripts/windows'}


[lf_windows]
config = {this = '~/AppData/Local/lf/lfrc', to_this = 'LIBRARY_ROOT/settings/lf/windows/lfrc'}
colors = {this = '~/AppData/Local/lf/colors', to_this = 'LIBRARY_ROOT/settings/lf/windows/colors'}
icons = {this = '~/AppData/Local/lf/icons', to_this = 'LIBRARY_ROOT/settings/lf/windows/icons'}


[lf_linux]
colors = {this = '~/.config/lf/colors', to_this = 'LIBRARY_ROOT/settings/lf/linux/colors'}
config = {this = '~/.config/lf/lfrc', to_this = 'LIBRARY_ROOT/settings/lf/linux/lfrc'}
icons = {this = '~/.config/lf/icons', to_this = 'LIBRARY_ROOT/settings/lf/linux/icons'}

[broot]
config = {this = '~/.config/broot/conf.toml', to_this = 'LIBRARY_ROOT/settings/broot/conf.toml'}

[pistol_linux]
config = {this = '~/.config/pistol/pistol.conf', to_this = 'LIBRARY_ROOT/settings/pistol/pistol.conf'}

[gromit_linux]
config = {this = '~/.var/app/net.christianbeier.Gromit-MPX/config/gromit-mpx.cfg', to_this = 'LIBRARY_ROOT/settings/gromit-mpx/gromit-mpx.cfg'}

# zoxide can't read symlink files see: https://github.com/ajeetdsouza/zoxide/issues?q=is%3Aissue+is%3Aopen+symlink
# [zoxide_windows]
# database = {this = '~/AppData/Local/zoxide/db.zo', to_this = '~/dotfiles/settings/zoxide_windows/db.zo'}

# [zoxide_linux]
# database = {this = '~/.local/share/zoxide/db.zo', to_this = '~/dotfiles/settings/zoxide_linux/db.zo'}

#[broot_windows]
#config = { this = '~/AppData/Roaming/dystroy/config', to_this = 'LIBRARY_ROOT/settings/broot/config' }


# [tmux_linux]
# config = {this = '~/.tmux.conf', to_this = 'LIBRARY_ROOT/settings/tmux/.tmux.conf'}
# tmate = {this = '~/.tmate.conf', to_this = 'LIBRARY_ROOT/settings/tmux/.tmate.conf'}


[zellij_linux]
config = { this = '~/.config/zellij', to_this = 'LIBRARY_ROOT/settings/zellij' }
#themes = { this = '~/.config/zellij/themes', to_this = 'LIBRARY_ROOT/settings/zellij/themes' }
#layouts = { this = '~/.config/zellij/layouts', to_this = 'LIBRARY_ROOT/settings/zellij/layouts' }

[starship]
config = {this = '~/.config/starship.toml', to_this = 'LIBRARY_ROOT/settings/shells/starship/starship.toml'}

[mprocs_windows]
config = {this = '~/mprocs.yaml', to_this = 'LIBRARY_ROOT/settings/mprocs/windows/mprocs.yaml'}


[wsl_windows]
home = {this = '~/wsl', to_this = '\\wsl.localhost\Ubuntu-22.04\home\username'}
# see \\wsl$ and ~\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState
config = {this = '~/.wslconfig', to_this = 'LIBRARY_ROOT/settings/wsl/.wslconfig'}

[wsl_linux]
home = {this = '~/win', to_this = '/mnt/c/Users/username'}

[ngrok]
config = {this = '~/.config/ngrol/ngrok.yml', to_this = '~/dotfiles/creds/tokens/ngrok.yml'}
 
[linters]
flake8 = {this = '~/.flake8', to_this = 'LIBRARY_ROOT/settings/linters/.flake8'}
mypy = {this = '~/.mypy.ini', to_this = 'LIBRARY_ROOT/settings/linters/.mypy.ini'}
ruff = {this = '~/.ruff.toml', to_this = 'LIBRARY_ROOT/settings/linters/.ruff.toml'}


[helix_windows]
languages = { this = '~/AppData/Roaming/helix/languages.toml', to_this = 'LIBRARY_ROOT/settings/helix/languages.toml' }
config = { this = '~/AppData/Roaming/helix/config.toml', to_this = 'LIBRARY_ROOT/settings/helix/config.toml' }

[helix_linux]
languages = { this = '~/.config/helix/languages.toml', to_this = 'LIBRARY_ROOT/settings/helix/languages.toml' }
config = { this = '~/.config/helix/config.toml', to_this = 'LIBRARY_ROOT/settings/helix/config.toml' }

# because lvim is under high maintinance, its best to get latest config and modify it on the fly instead of using a static config
# this proces is done at the end of the setup
#[lvim_windows]
#config = { this = '~/AppData/Local/lvim/config.lua', to_this = 'LIBRARY_ROOT/settings/lvim_windows/config.lua' }
#
#[lvim_linux]
#config = { this = '~/.config/lvim/config.lua', to_this = 'LIBRARY_ROOT/settings/lvim_linux/config.lua' }

[svim_windows]
init = { this = '~/.SpaceVim.d/init.toml', to_this = 'LIBRARY_ROOT/settings/svim/windows/init.toml' }

[svim_linux]
init = { this = '~/.SpaceVim.d/init.toml', to_this = 'LIBRARY_ROOT/settings/svim/linux/init.toml' }

[apps_windows]
notepadpp = {this = '~/AppData/Local/Microsoft/WindowsApps/notepad++.exe', to_this = 'C:/Program Files/Notepad++/notepad++.exe'}
# tesseract = {this = '~/AppData/Local/Microsoft/WindowsApps/tesseract.exe', to_this = '~/AppData/Local/Tesseract-OCR/tesseract.exe'}  # doesn't work without whole installation dir is on PATH.

[webapp_linux]
brave = {this = '~/.local/share/applications', to_this = '~/dotfiles/config/webapps/linux/brave', contents = 'True'}

[startup_windows]
startup = {this = '~/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup', to_this = '~/dotfiles/scripts/windows_startup', contents = 'True'}

# [aws]
# config = {this = '~/.aws/config', to_this = '~/dotfiles/aws/.aws', contents = 'True'}

[wt_windows]
settings = { this = '~/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json', to_this = 'LIBRARY_ROOT/settings/shells/wt/settings.json' }

[chatgpt]
config = { this = '~/.config/chatgpt/config.json', to_this = '~/dotfiles/creds/tokens/openai_chatgpt_config.json' }

[mods]
config = {this = '~/.config/mods/mods.yml', to_this = '~/dotfiles/creds/mods/mods.yml'}

[m365]
config1 = {this = '~/.cli-m365-msal.json', to_this = '~/dotfiles/creds/tokens/.cli-m365-msal.json'}
config2 = {this = '~/.cli-m365-tokens.json', to_this = '~/dotfiles/creds/tokens/.cli-m365-tokens.json'}
